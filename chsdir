#!/usr/bin/env python
# -*- coding:utf-8 -*-
# shaozx@gmail.com 2011-08-02
#
# 用拼音补全命令行中的中文名称和路径
#
# 实验目录如下：
# biff@lenovo:/domain/WorkSpace$ ls
# SVN培训  全球眼  浙江建行  浙江农信
#
# 使用: (输完后按 TAB 键自动补全)
#    cd S     <tab>             进入[SVN培训]
#    cd q     <tab>             进入[全球眼]
#    cd z     <tab>             自动补全[浙江]
#    cd zj    <tab><tab>        提示[浙江建行 浙江农信]备选
#    cd 浙江j <tab>             进入[浙江建行]
#    cd zjj   <tab>             进入[浙江建行]
#    cd zj1   <tab>             进入[浙江建行]
#    cd zj2   <tab>             进入[浙江农信]
#
#   2009-05-08修订  取不到拼音的汉字匹配任何字符
#   2009-05-07新增  名称中有中文全角,可以用英文符号补全
#   2009-05-06修订  解决数字序号定位时借位的问题
#   2009-08-30新增  增加多音字支持，比如“音乐”
#                   ((遇到有未被收入的多音字，请邮件联系我))
#   2009-08-31新增  增加模糊拼音支持，比如'n'->'l'
#                   ((需手工增加环境变量，配置方法见后面说明))
#   2011-01-19修订  修正多音字在中间的问题，感谢 mozbugbox 提交修订代码
#                   参考 http://code.google.com/p/easyscripts/issues/detail?id=1
#   2011-08-02修订  识别目录缩写,如 ~/
#
# 安装:
#    直接执行 sh install.sh 进行安装;
#
# 如需模糊拼音支持，在系统环境变量中增加匹配的列表，对 n/l 进行模糊匹配
# export CHSDIR="{ 'n':'l' }"
# 多个匹配对之间用逗号隔开：
# export CHSDIR="{ 'n':'l','f':'p' }"
#
#
# 问题：
#  1、多音字未解决,比如[浙江建行]要输入[zjjx]; ((已解决))
#  2、大字符集输入使用变通的方法(取不到拼音的汉字匹配任何字符)
#
# 蔡国权/ 蔡依林/ 陈百强/ 陈楚生/ 陈慧琳/ 陈坤/   陈淑桦/ 成龙/
# 蔡琴/   草蜢/   陈柏宇/ 陈海铃/ 陈慧娴/ 陈倩倩/ 陈小春/
#  如上,因为"蜢"和"倩"都是"?",[草蜢]无法用[cm]进入,只能用[c4]进入
#  如果输入[cm<tab>],会提示[草蜢]和[陈倩倩],这时用[cm1]进入
#  如果输入[cq<tab>],会提示[蔡琴][草蜢]和[陈倩倩]，同样用数字选择
#
#
# 祝Linux之行一路顺风!
# 有问题邮件联系!
#

import os,sys
import locale

LIST_POLYPHONE={ "龟":"jgq", "咯":"gkl", "轧":"gyz", "单":"dcs",
        "腌":"ay", "阿":"ae", "艾":"ay", "扒":"bp", "膀":"bp",
        "磅":"bp", "堡":"bp", "刨":"bp", "暴":"bp", "泌":"bm",
        "辟":"bp", "扁":"bp", "便":"bp", "便":"pb", "骠":"bp",
        "泊":"bp", "藏":"cz", "曾":"cz", "禅":"cs", "裳":"cs",
        "剿":"cj", "嘲":"cz", "车":"cj", "铛":"cd", "乘":"cs",
        "澄":"cd", "匙":"cs", "臭":"cx", "畜":"cx", "幢":"cz",
        "椎":"cz", "兹":"cz", "伺":"cs", "枞":"cz", "攒":"cz",
        "撮":"cz", "沓":"dt", "沓":"dt", "叨":"dt", "钿":"dt",
        "调":"dt", "囤":"dt", "否":"fp", "脯":"fp", "芥":"gj",
        "扛":"gk", "革":"gj", "给":"gj", "颈":"gj", "枸":"gj",
        "谷":"gy", "鹄":"gh", "纶":"gl", "莞":"gw", "桧":"gh",
        "咳":"hk", "吭":"hk", "行":"hx", "巷":"hx", "合":"hg",
        "红":"hg", "虹":"hj", "会":"hk", "稽":"jq", "矜":"jq",
        "稽":"jq", "缉":"jq", "亟":"jq", "茄":"jq", "侥":"jy",
        "缴":"jz", "解":"jx", "趄":"qj", "咀":"jz", "卡":"kq",
        "壳":"kq", "溃":"kh", "括":"kg", "蔓":"mw", "秘":"mb",
        "粘":"nz", "拗":"na", "弄":"nl", "炮":"pb", "屏":"pb",
        "曝":"pb", "瀑":"pb", "栖":"qx", "蹊":"qx", "奇":"qj",
        "荨":"qx", "纤":"qx", "强":"qj", "圈":"qj", "葚":"sr",
        "厦":"sx", "省":"sx", "识":"sz", "属":"sz", "忪":"sz",
        "宿":"sx", "汤":"st", "提":"td", "圩":"wx", "尾":"wy",
        "尉":"wy", "系":"xj", "虾":"xh", "吓":"xh", "校":"xj",
        "吁":"xy", "叶":"yx", "遗":"yw", "乐":"yl", "颤":"zc",
        "殖":"zs" }

LIST_CHARS={ "～":"~", "！":"!", "＠":"@", "＃":"#", "＄":"$",
        "％":"%", "＆":"&", "＊":"*", "（":"(", "）":")", "＿":"_",
        "－":"-", "＋":"+", "［":"[", "］":"]", "＜":"<", "＞":">",
        "？":"?", "，":",", "。":".", "／":"/", "、":"," }

LIST_TEST={}
try:
    LIST_TEST=eval( os.getenv("CHSDIR") )
    list(LIST_TEST.keys())
except:
    LIST_TEST={}

def getPYSTR(s):
    try: s=str(s,"UTF8")
    except: return s

    ret = ""
    for i in range(len(s)):
        uchr = LIST_CHARS.get(s[i],s[i])
        if uchr == s[i] :
            uchr = LIST_POLYPHONE.get(uchr,uchr)
            if len(uchr) > 1 :
                uchr = "`%s`"%uchr
            else:
                uchr = getPY(uchr)
                if uchr != s[i]:
                    uchr = LIST_TEST.get(uchr,uchr)
        ret += uchr
    return ret.encode("UTF8")


def getPY(s):
    try: chr=s.encode("GB18030")
    except: return s
    if chr<"\xb0\xa1": return s
    if chr>"\xd7\xf9": return "?"
    if chr<"\xb0\xc5": return "a"
    if chr<"\xb2\xc1": return "b"
    if chr<"\xb4\xee": return "c"
    if chr<"\xb6\xea": return "d"
    if chr<"\xb7\xa2": return "e"
    if chr<"\xb8\xc1": return "f"
    if chr<"\xb9\xfe": return "g"
    if chr<"\xbb\xf7": return "h"
    if chr<"\xbf\xa6": return "j"
    if chr<"\xc0\xac": return "k"
    if chr<"\xc2\xe8": return "l"
    if chr<"\xc4\xc3": return "m"
    if chr<"\xc5\xb6": return "n"
    if chr<"\xc5\xbe": return "o"
    if chr<"\xc6\xda": return "p"
    if chr<"\xc8\xbb": return "q"
    if chr<"\xc8\xf6": return "r"
    if chr<"\xcb\xfa": return "s"
    if chr<"\xcd\xda": return "t"
    if chr<"\xce\xf4": return "w"
    if chr<"\xd1\xb9": return "x"
    if chr<"\xd4\xd1": return "y"
    if chr<"\xd7\xfa": return "z"
    return s


if __name__== '__main__':
    if len(sys.argv) != 3 :
        sys.exit(1)

    dironly = sys.argv[1]

    cur = sys.argv[2]
    cur = os.path.expanduser(cur)
    cur = cur.replace("\\","")

    _cur=cur
    for k in list(LIST_TEST.keys()):
        _cur = _cur.replace( k, LIST_TEST.get(k) )

    idx=None
    if len(cur)>1 and cur[-1:] >'0' and cur[-1:]<='9':
        idx = int(cur[-1])
        _cur = cur[:-1]

    _name=os.path.basename(_cur)
    name=os.path.basename(cur)
    dir=os.path.dirname(cur)
    if len(dir)==0 : dir="./"

    if not os.path.exists(dir):
        sys.exit(0)

    try:
        list = os.listdir(dir)
    except:
        sys.exit(0)

    # TODO delete ??
    if name in list or _name in list :
        sys.exit(0)

    ret = []

    _name_py= getPYSTR(_name).replace("\\","");
    for l in list:
        _file_py = getPYSTR(l).replace("\\","")
        if l == _file_py : continue

        i=0;j=0;
        while len(_name_py) > i and len(_file_py) > j :
            if _file_py[j] == "`" and _name_py[i] != "`":
                end = _file_py.index("`",j+1)
                if _file_py.find( _name_py[i], j, end ) > 0 :
                    i+=1; j=end+1
                    continue
            else:
                if _name_py[i] == _file_py[j] or  _file_py[i] == "?":
                    i+=1; j+=1
                    continue;
            if _name_py[i]!=l[i] : break
        if len(_name_py) == i :
            tmp = (dir+"/"+l).replace(".//","")
            if dironly == "x-d" and not os.path.isdir(tmp): continue
            ret.append( tmp )

    try:
        locale.setlocale(locale.LC_ALL,"")
    except:
        pass

    ret.sort(key=locale.strxfrm)
    if idx and len(ret) > idx-1:
        print(ret[idx-1])
    else:
        print("\n".join(ret))

